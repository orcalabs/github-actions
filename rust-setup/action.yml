name: "Rust Setup"
description: "Sets up an environment for running rust commands (clippy, doc, test, etc.)"

inputs:
  dependencies:
    required: false
    description: "A list of ubuntu packages to install"
  pip-packages:
    required: false
    description: "A list of pip packages to install"
  custom-protoc-release-zip:
    required: false
    description: "Custrom protoc release page zip name"
  custom-protoc-version:
    required: false
    description: "A custom protoc version"
  rust-version:
    required: false
    default: stable
    description: "Specific rust version to use, defaults to the latest"
  cloudsmith-api-key:
    required: false
    description: "The CLOUDSMITH_API_KEY secret"

runs:
  using: composite
  steps:

    # - name: update package repository
    #   shell: bash
    #   if: ${{ inputs.dependencies }}
    #   run: |
    #     sudo apt-get update -y

    # - name: cached apt packages
    #   uses: awalsh128/cache-apt-pkgs-action@latest
    #   if: ${{ inputs.dependencies }}
    #   with:
    #     packages: ${{ inputs.dependencies }}
    #     version: 1.0

    # - name: install dependencies
    #   shell: bash
    #   if: ${{ inputs.dependencies }}
    #   run: |
    #     echo ${{ inputs.dependencies }} | sed -e 's/\n//g' | xargs sudo apt install

    - name: Update apt package list
      shell: bash
      run: sudo apt-get update -y

    - name: Restore apt cache
      id: apt-cache
      uses: actions/cache@v3
      with:
        path: |
          /var/lib/apt/lists
          /var/cache/apt/archives
        key: apt-${{ inputs.dependencies }}

    - name: Install apt packages
      if: steps.apt-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # xargs sudo apt-get install -y < apt-packages.txt
        echo ${{ inputs.dependencies }} | sed -e 's/\n//g' | xargs sudo apt install
      # Ensure that 'apt-packages.txt' contains a list of packages to be installed

    # - name: Save apt cache
    #   if: steps.apt-cache.outputs.cache-hit != 'true'
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       /var/lib/apt/lists
    #       /var/cache/apt/archives
    #     key: apt-${{ inputs.dependencies }}

    - name: install dependencies
      shell: bash
      if: ${{ inputs.pip-packages }}
      run: |
        sudo apt-get update -y
        sudo apt-get install python3-pip
        echo ${{ inputs.pip-packages }} | sed -e 's/\n//g' | xargs sudo pip3 install
    - name: install custom protoc
      shell: bash
      if: ${{ inputs.custom-protoc-version }}
      run: |
        curl -OL https://github.com/protocolbuffers/protobuf/releases/download/${{ inputs.custom-protoc-version }}/${{ inputs.custom-protoc-release-zip }} \
          && unzip -o ${{ inputs.custom-protoc-release-zip }} -d /usr/local bin/protoc \
          && rm -f ${{ inputs.custom-protoc-release-zip }}
    - uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ inputs.rust-version || 'stable' }}
        components: clippy, rustfmt
    - name: setup cloudsmith credentials
      shell: bash
      if: ${{ inputs.cloudsmith-api-key }}
      run: |
        export API_KEY=${{ inputs.cloudsmith-api-key }}
        echo "[registries.orcalabs-orcastrator]
          index = \"sparse+https://cargo.cloudsmith.io/orcalabs/orcastrator/\"
          token = \"Token $API_KEY\"
          credential-provider = \"cargo:token\"" >> ~/.cargo/config.toml
