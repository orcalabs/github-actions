name: Rust Verify

env:
  SQLX_OFFLINE: true

on:
  workflow_call:
    inputs:
      dependencies:
        required: false
        type: string
        description: "A list of ubuntu packages to install"
      pip-packages:
        required: false
        type: string
        description: "A list of pip packages to install"
      image-build-command:
        required: false
        type: string
        description: "A command for building docker images"
      src-dir:
        required: false
        default: src
        type: string
        description: "Path to rust source code"
      sqlx-migrations-dir:
        required: false
        type: string
        description: "Path to sqlx migrations directory"
      sqlx-src-dir:
        required: false
        type: string
        description: "Path to sqlx source code (inside src-dir)"
      rust-version:
        required: false
        type: string
        description: "Specific rust version to use, defaults to the latest"
      custom-protoc-release-zip:
        required: false
        type: string
        description: "Custrom protoc release page zip name"
      custom-protoc-version:
        required: false
        type: string
        description: "A custom protoc version"
      openapi-bins:
        required: false
        type: string
        description: "OpenAPI binaries to run and validate"
      check-sqlx:
        required: false
        type: boolean
        default: false
        description: "Whether to check sqlx or not"
      postgres-version:
        required: false
        type: string
        default: postgres:15.1-alpine
        description: "Version of postgres to use in sqlx jobs"

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Orca Labs github actions
        uses: orcalabs/github-actions/rust-setup@master
        with:
          cloudsmith-cargo-registry: ${{ secrets.CLOUDSMITH_CARGO_REGISTRY }}
          rust-version: ${{ inputs.rust-version }}
      - name: cargo fmt
        run: |
          cd ${{ inputs.src-dir }}
          cargo fmt -- --check

  clippy:
    runs-on: buildjet-2vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Orca Labs github actions
        uses: orcalabs/github-actions/rust-setup@master
        with:
          dependencies: ${{ inputs.dependencies }}
          cloudsmith-cargo-registry: ${{ secrets.CLOUDSMITH_CARGO_REGISTRY }}
          cloudsmith-git-api-key: ${{ secrets.CLOUDSMITH_GIT_API_KEY }}
          rust-version: ${{ inputs.rust-version }}
          custom-protoc-version: ${{ inputs.custom-protoc-version }}
          custom-protoc-release-zip: ${{ inputs.custom-protoc-release-zip }}
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false
          workspaces: ${{ inputs.src-dir }}
          shared-key: shared
          cache-provider: buildjet
      - name: cargo clippy
        run: |
          cd ${{ inputs.src-dir }}
          cargo clippy --all-targets --all-features

  doc:
    runs-on: buildjet-2vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - uses: orcalabs/github-actions/rust-setup@master
        with:
          dependencies: ${{ inputs.dependencies }}
          cloudsmith-cargo-registry: ${{ secrets.CLOUDSMITH_CARGO_REGISTRY }}
          cloudsmith-git-api-key: ${{ secrets.CLOUDSMITH_GIT_API_KEY }}
          rust-version: ${{ inputs.rust-version }}
          custom-protoc-version: ${{ inputs.custom-protoc-version }}
          custom-protoc-release-zip: ${{ inputs.custom-protoc-release-zip }}
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false
          workspaces: ${{ inputs.src-dir }}
          shared-key: shared
          cache-provider: buildjet
      - name: cargo doc
        run: |
          cd ${{ inputs.src-dir }}
          cargo doc --no-deps --document-private-items

  test:
    runs-on: buildjet-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Orca Labs github actions
        uses: orcalabs/github-actions/rust-setup@master
        with:
          dependencies: ${{ inputs.dependencies }}
          pip-packages: ${{ inputs.pip-packages }}
          cloudsmith-cargo-registry: ${{ secrets.CLOUDSMITH_CARGO_REGISTRY }}
          cloudsmith-git-api-key: ${{ secrets.CLOUDSMITH_GIT_API_KEY }}
          rust-version: ${{ inputs.rust-version }}
          custom-protoc-version: ${{ inputs.custom-protoc-version }}
          custom-protoc-release-zip: ${{ inputs.custom-protoc-release-zip }}
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false
          workspaces: ${{ inputs.src-dir }}
          shared-key: shared
          cache-provider: buildjet
      - name: build images
        if: ${{ inputs.image-build-command }}
        run: ${{ inputs.image-build-command }}
      - name: cargo test
        run: |
          cd ${{ inputs.src-dir }}
          cargo test

  sqlx:
    if: ${{ inputs.check-sqlx }}
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: false
      DATABASE_URL: postgres://127.0.0.1:5432?user=postgres&password=postgres
    services:
      postgres:
        image: ${{ inputs.postgres-version }}
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Orca Labs github actions
        uses: orcalabs/github-actions/rust-setup@master
        with:
          dependencies: ${{ inputs.dependencies }}
          cloudsmith-cargo-registry: ${{ secrets.CLOUDSMITH_CARGO_REGISTRY }}
          cloudsmith-git-api-key: ${{ secrets.CLOUDSMITH_GIT_API_KEY }}
          rust-version: ${{ inputs.rust-version }}
          custom-protoc-version: ${{ inputs.custom-protoc-version }}
          custom-protoc-release-zip: ${{ inputs.custom-protoc-release-zip }}
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false
          shared-key: sqlx
          workspaces: ${{ inputs.src-dir }}
      - name: install sqlx
        run: cargo install sqlx-cli --no-default-features --features postgres,rustls
      - name: migrate sqlx
        run: |
          cd ${{ inputs.src-dir }}
          if [ ! -z "${{ inputs.sqlx-src-dir }}" ]; then
            cd ${{ inputs.sqlx-src-dir }}
          elif [ ! -z "${{ inputs.sqlx-migrations-dir }}" ]; then
            cd ${{ inputs.sqlx-migrations-dir }}
          else
            echo 'Either `sqlx-src-dir` or `sqlx-migrations-dir` must be specified'
            exit 1
          fi
          sqlx migrate run
      - name: sqlx prepare check
        run: |
          cd ${{ inputs.src-dir }}
          if [ ! -z "${{ inputs.sqlx-src-dir }}" ]; then
            cd ${{ inputs.sqlx-src-dir }}
            cargo sqlx prepare --check -- --all-features
          else
            cargo sqlx prepare --check --workspace -- --all-features
          fi

  openapi:
    if: ${{ inputs.openapi-bins }}
    runs-on: buildjet-2vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Orca Labs github actions
        uses: orcalabs/github-actions/rust-setup@master
        with:
          dependencies: ${{ inputs.dependencies }}
          cloudsmith-cargo-registry: ${{ secrets.CLOUDSMITH_CARGO_REGISTRY }}
          cloudsmith-git-api-key: ${{ secrets.CLOUDSMITH_GIT_API_KEY }}
          rust-version: ${{ inputs.rust-version }}
          custom-protoc-version: ${{ inputs.custom-protoc-version }}
          custom-protoc-release-zip: ${{ inputs.custom-protoc-release-zip }}
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install openapi-generator-cli
        run: npm install -g @openapitools/openapi-generator-cli
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false
          workspaces: ${{ inputs.src-dir }}
          shared-key: shared
          cache-provider: buildjet
      - name: Produce openapi-spec
        run: |
          cd ${{ inputs.src-dir }}
          echo "${{ inputs.openapi-bins }}" | xargs -t -I {} sh -c 'cargo run --bin "$1" > "$1.json"' -- {}
      - name: Validate OpenAPI definition
        run: |
          cd ${{ inputs.src-dir }}
          echo "${{ inputs.openapi-bins }}" | xargs -t -I {} openapi-generator-cli validate -i "{}.json"
