name: Rust Build Cache

env:
  SQLX_OFFLINE: true

on:
  workflow_call:
    inputs:
      dependencies:
        required: false
        type: string
        description: 'A list of ubuntu packages to install'
      src-dir:
        required: false
        default: src
        type: string
        description: 'Path to rust source code'
      sqlx-migrations-dir:
        required: false
        type: string
        description: 'Path to sqlx migrations directory'
      sqlx-src-dir:
        required: false
        type: string
        description: 'Path to sqlx source code (inside src-dir)'
      rust-version:
        required: false
        type: string
        description: 'Specific rust version to use, defaults to the latest'
      custom-protoc-release-zip:
        required: false
        type: string
        description: 'Custrom protoc release page zip name'
      custom-protoc-version:
        required: false
        type: string
        description: 'A custom protoc version'
      build-sqlx-cache:
        required: false
        type: boolean
        default: false
        description: 'Whether to build sqlx cache or not'
      postgres-version:
        required: false
        type: string
        default: postgres:15.1-alpine
        description: 'Version of postgres to use in sqlx jobs'
      cargo-features:
        required: false
        type: string
        default: false
        description: 'Comma separated list of features to pass to cargo, defaults to --all-features. Pass an empty string to enable no features'

jobs:
  build-cache:
    runs-on: buildjet-8vcpu-ubuntu-2204
    steps:
      - uses: orcalabs/github-actions/disk-cleanup@master
      - uses: actions/checkout@v4
      - name: Checkout Orca Labs github actions
        uses: orcalabs/github-actions/rust-setup@master
        with:
          dependencies: ${{ inputs.dependencies }}
          cloudsmith-api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          rust-version: ${{ inputs.rust-version }}
          custom-protoc-version: ${{ inputs.custom-protoc-version }}
          custom-protoc-release-zip: ${{ inputs.custom-protoc-release-zip }}
      - uses: Swatinem/rust-cache@v2.8.0
        id: cache
        with:
          workspaces: ${{ inputs.src-dir }}
          shared-key: shared
          cache-provider: buildjet
      - if: steps.cache.outputs.cache-hit != 'true'
        name: build cache
        run: |
          cd ${{ inputs.src-dir }}
          if [ "${{ inputs.cargo-features }}" == "" ]; then
            cargo clippy --all-targets
          elif [ -z "${{ inputs.cargo-features }}" ]; then
            cargo clippy --all-targets --features ${{ inputs.cargo-features }};
          else
            cargo clippy --all-targets --all-features
          fi
          cargo doc --no-deps --document-private-items
          cargo test build
          cargo build

  build-sqlx-cache:
    if: ${{ inputs.build-sqlx-cache }}
    runs-on: buildjet-8vcpu-ubuntu-2204
    env:
      SQLX_OFFLINE: false
      DATABASE_URL: postgres://127.0.0.1:5432?user=postgres&password=postgres
    services:
      postgres:
        image: ${{ inputs.postgres-version }}
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Orca Labs github actions
        uses: orcalabs/github-actions/rust-setup@master
        with:
          dependencies: ${{ inputs.dependencies }}
          cloudsmith-api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          rust-version: ${{ inputs.rust-version }}
          custom-protoc-version: ${{ inputs.custom-protoc-version }}
          custom-protoc-release-zip: ${{ inputs.custom-protoc-release-zip }}
      - uses: Swatinem/rust-cache@v2.8.0
        id: cache
        with:
          shared-key: sqlx
          workspaces: ${{ inputs.src-dir }}
          cache-provider: buildjet
      - if: steps.cache.outputs.cache-hit != 'true'
        name: install sqlx
        run: cargo install sqlx-cli --no-default-features --features postgres,rustls
      - if: steps.cache.outputs.cache-hit != 'true'
        name: rm .env
        run: |
          [ -f .env ] && rm .env
      - if: steps.cache.outputs.cache-hit != 'true'
        name: migrate sqlx
        run: |
          cd ${{ inputs.src-dir }}
          if [ ! -z "${{ inputs.sqlx-src-dir }}" ]; then
            cd ${{ inputs.sqlx-src-dir }}
          elif [ ! -z "${{ inputs.sqlx-migrations-dir }}" ]; then
            cd ${{ inputs.sqlx-migrations-dir }}
          else
            echo 'Either `sqlx-src-dir` or `sqlx-migrations-dir` must be specified'
            exit 1
          fi
          sqlx migrate run
      - if: steps.cache.outputs.cache-hit != 'true'
        name: build cache
        run: |
          cd ${{ inputs.src-dir }}

          features="--all-features"
          if [ "${{ inputs.cargo-features }}" == "" ]; then
            features=""
          elif [ -z "${{ inputs.cargo-features }}" ]; then
            features="--features ${{ inputs.cargo-features }}"
          fi

          if [ ! -z "${{ inputs.sqlx-src-dir }}" ]; then
            cd ${{ inputs.sqlx-src-dir }}
            cargo sqlx prepare --check -- $features
          else
            cargo sqlx prepare --check --workspace -- $features
          fi
